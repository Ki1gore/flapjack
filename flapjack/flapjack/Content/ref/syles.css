body 
{
	font-family:Arial; /*changes ALL TEXT in the body tag to Arial*/
}

/*div p, h1 targets any p tags in a div (but only <p> tags that are inside <div>) and any h1 tag
{
	color:Red;
}*/

/*h1,h2,p
{
	font-family:Arial; /*group selector to change h1,h2,p tag text to ariel
}*/

h1
{
	font-size:18px; /*18 pixels (use this for text?)*/
}

h2
{
	font-size:16px;
}

p
{
	/*font-size:14px;*/
	/*line-height:1.5;*/ /*line height can use multiplyer but everything else needs some unit of measure*/
	line-height:1.5em;
}

div
{
	background-color:#ccc; /*sets background for whole div 
							(div's appear to be exactly the height 
							and width of whatever is in them)*/
	padding:10px; /*remember the unit of measure (px in this case)*/
}

h1
{
	font-size:3em;     /*2em means 2*defaultFontSize*/
	margin-bottom:1em; /*if the em unit is used outher than to set font-size, an em becomes equal
					/*to however large the font-size now is.  So the h1 text font size is say*/
					/*double the default font size (default=16px, 16*2=32) making all h1 tag text*/
					/*32px in size.  Margin-bottom is also being set for all h1 tags, thus, since*/
					/*the h1 text is now 32px, 1em = 32px (and presumably 2em = 64 etc)*/
					/*kind of makes sense because the changing value of em mitigates an increasing*/
					/*font size that would (if external values of em were not bound to font size em values*/
					/*allow text thats getting larger to become larger than its container (say a div tag)*/
					/*making the text overrun into other parts of the page (all this is after all about */
					/*fitting and placing (primarily) words on a page*/
					
					/*Route em's or rem (CSS3 only) takes its value from the root unit eg-body, html*/
}

#accordion
{
	width:400px;
}

.redLetters
{
	color:Red;
	font-style: italic;
	border:2px solid blue;
}


/*general format for this selector is [element][.class] or [element][#identifier] (no spaces) - its*/
/*a way of targeting a specific element but only if that element is identified by [.class] or [#identifier]*/
/*NOTE: this is fairly process heavy*/
h1.redLetters /*wasn't working for a while because the h1 text was contained
			  /*in a <span>, for this to work the h1 itself must have class*/
			  /*redLetters*/
{
	color: Blue;
	
}

/*universal selector - selects everything*/
*
{
	
}

/*group selector - this particular one applies to h1,h2,p,div*/
h1,h2,p,div
{
	/*font-family:Wingdings;*/
}

/*descendent selector - in this case all h1 elements that appear in header tags*/
/*won't work if an h1 has a class that being styled even if its in a header tag*/
header h1
{
	color:Purple;
}

/*another descendent selector, in this case - find any h2 tags that are within any other elements*/
/*that use the class .redLetters*/
.redLetters h2
{
	/*font-size:20em;*/
}

/*child selector - only targets in this case any p tag that is a DIRECT descentent of an article tag*/
/*if there were p tags in a div tag within an article tag, they would not be selected*/
article > p
{
	color:Green;
}

/*child selectors can also combined with descentent selectors*/
ol > li
{
	/*font-style:italic;*/
	/*color:Orange;*/
}

/*adjacent selector - in this case targets any p tags but only ones that immediatly follow h2 tags*/
/*in index.cshtml this is the paragraph after the "Next is a paragraph:" h2 tagged text.*/
h2 + p
{
	/*font-family:Wingdings;*/
}

/*Attribute selector - this selects the specified attribute of an element, in this case, the title*/
/*attribute of the <a> tag*/
a[title]
{
	color:Red;
}

/*Attribute selector - this time selecting a specific value of the title attribute of an <a> element*/
a[title="visit About page"] 
{
	font-family:Buxton Sketch;
}

/*attribute selector this time targeting a class, only 1 of the paragraph tags gets turned red because*/
/*the browser must match the EXACT value / value pattern*/
/*p[class~="red"] means - select any p tags that have the class "red" applied to them (regardless of */
/*any other classes applied as well*/
p[class~="red"]
{
	color:Red;
}

/*Attribute selector - this time matching any <a> tag with an href value that BEGINS with (hence the ^=)*/
/*"http://", this of course only turns the external link Teal*/
a[href^="http://"]
{
	color:Teal;
}

/*Attribute selector - the $= targets any href value that ENDS in "jpg" so this time it just changes*/
/*the font size of the link to the image*/
a[href$="jpg"]
{
	font-size:2em;
}

/*Attribute selector - this one selects any <a> tag title attribute that contains the word "visit"*/
/*looks like regex can be used here, it will even match "visit" to the title string "visitbbc.co.uk"*/
a[title*="visit"]
{
	font-style:italic;
}

/*when setting a pseudo class selector for the following events, they must be written in this order*/
/*or there will be style conflicts between them*/
/*a:link
a:visited
a:hover
a:active*/
/*Pseudo-class selector - basically allows you to select specific events for elements, this one increases*/
/*font size of all link tags when they are hovered over*/
a:hover
{
	font-size:3em;
}

/*Structural pseudo class selector - this is saying, select any span element that is the first child element */
/*of its parent element */
span:first-child
{
	font-size:3em;
	background:blue;
}

/*Structural pseudo class selector - in this case, selects the FIRST h2 tag to appear in the parent element*/
/*also available:*/
/*p:only-child	this selects any p element only if it is the only child element of it parent element*/
h2:first-of-type
{
	background:pink;
}

ol
{
	list-style:none;
}

ol > li
{
	background:beige;
	padding:5px;
	margin:.6em 0;
	width:200px;
}

/*nth child selector - this one finds every <li> element contained in an <ol> element and sets every second */
/*<li> tag it finds to background:tan (think data grids etc here that allways have alternating colours for rows)*/
/*there are also the keywords to be used in place of 2n, like odd and even for target rows 2,4,6 etc and rows 1,3,5 etc*/
/*basicaly the format is:*/
/*([the pattern of elements to be selected]+[the element at which to start]*/
/*(2n+4) -> select every second element starting with the fourth*/
/*(5n+1) -> select every 5th element starting with the first (so this one selects the first element (which is 1), then counts 1,2,3,4 on 5 selects that element*/
ol > li:nth-child(5n)
{
	/*background:tan;*/
}

/*nth child selector - similar to above except the minus sign instructs the browser to select up rather than down*/
/*this selecotr will start at 8 then to 6 then 4 then 2.  Also possible to make the start element negative*/
ol > li:nth-child(-2n+8)
{
	/*background:tan*/
}

/*nth child selector - this one targets the middle of the list excluding first 5 elements and last 5 elements*/
/*"nth-last-child" indicates the last element*/
ol > li:nth-child(1n+6):nth-last-child(1n+6)
{
	/*background:tan;*/
}

/*nth child selector - this one selects first 5 elements and last 5 elements*/
ol > li:nth-child(-1n+5), ol > li:nth-last-child(-1n+5)
{
	background:tan;
}

header > h1
{
	text-align:center;
}

/*Psuedo element selector - this one is selecting the first line of every <p> tag*/
h1 + p::first-line
{
	font-family: Georgia;
	font-style: italic;
}

/*Psuedo element selector - this one is selecting the first letter of every <p> tag*/
h1 + p::first-letter
{
	font-size:3em;
	font-family: Georgia;
	float: left; /*makes the text flow around the drop cap first letter*/
	padding:10px 5px 0 0;
}

/*just moving the text away from the edge of the screen and limiting the <article> width
/*so that the float:left effect is more visible*/
article
{
	width:600px;
	text-align:justify;
	margin-left:100px;
}

/*Psuedo element selector - this one is placing content after any <a> tags*/
a::after
{
	/*content: " [" attr(href)"]";*/
}




